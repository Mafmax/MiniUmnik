var isPushEnabled = false;

window.addEventListener('load', function() {
    var pushButton = document.querySelector('#push-button');

    if (pushButton !== null) {
        pushButton.addEventListener('click', function () {
            if (isPushEnabled) {
                unsubscribe();
            } else {
                subscribe();
            }
        });
    }

    // Check that service workers are supported, if so, progressively
    // enhance and add push messaging support, otherwise continue without it.
    if (window.location.protocol == "https:") {
        if ('serviceWorker' in navigator) {
            navigator.serviceWorker.register('/worker.js').then(initialiseState);
        } else {
            console.warn('Service workers aren\'t supported in this browser.');
        }
    } else {
        $("#push-block").hide();
    }
});


// Once the service worker is registered set the initial state
function initialiseState() {
    // Are Notifications supported in the service worker?
    if (!('showNotification' in ServiceWorkerRegistration.prototype)) {
        console.warn('Notifications aren\'t supported.');
        $("#push-block").hide();
        return;
    }
    // Check the current Notification permission.
    // If its denied, it's a permanent block until the
    // user changes the permission
    if (Notification.permission === 'denied') {
        console.warn('The user has blocked notifications.');
        $("#push-block").hide();
        return;
    }
    // Check if push messaging is supported
    if (!('PushManager' in window)) {
        console.warn('Push messaging isn\'t supported.');
        $("#push-block").hide();
        return;
    }
    // We need the service worker registration to check for a subscription
    navigator.serviceWorker.ready.then(function(serviceWorkerRegistration) {
        // Do we already have a push message subscription?
        serviceWorkerRegistration.pushManager.getSubscription()
            .then(function(subscription) {
                // Enable any UI which subscribes / unsubscribes from
                // push messages.

                switchPushButton(1);

                if (!subscription) {
                    // We aren't subscribed to push, so set UI
                    // to allow the user to enable push
                    setCheckbox(0);

                    if (typeof localStorage !== "undefined" && localStorage.getItem('a24-push-noauto') === null) {
                        subscribe();
                    }
                    return;
                }

                // Set your UI to show they have subscribed for
                // push messages
                isPushEnabled = true;
                setCheckbox(1);
            })
            .catch(function(err) {
                console.warn('Error during getSubscription()', err);
            });
    });
}



function subscribe() {
    if (!navigator.serviceWorker) return false;

    // Disable the button so it can't be changed while
    // we process the permission request
    switchPushButton(0);

    navigator.serviceWorker.ready.then(function(serviceWorkerRegistration) {
        serviceWorkerRegistration.pushManager.subscribe({userVisibleOnly: true})
            .then(function(subscription) {
                // The subscription was successful
                isPushEnabled = true;
                switchPushButton(1);
                setCheckbox(1);

                // to your server and save it to send a push message
                // at a later date
                return sendSubscriptionToServer(subscription);
            })
            .catch(function(e) {
                if (Notification.permission === 'denied') {
                    // The user denied the notification permission which
                    // means we failed to subscribe and the user will need
                    // to manually change the notification permission to
                    // subscribe to push messages
                    console.log('Permission for Notifications was denied');
                    switchPushButton(0);
                    setCheckbox(0);
                } else {
                    // A problem occurred with the subscription, this can
                    // often be down to an issue or lack of the gcm_sender_id
                    // and / or gcm_user_visible_only
                    console.log('Unable to subscribe to push.', e);
                    switchPushButton(1);
                    setCheckbox(0);
                }
            });
    });
}

function unsubscribe() {
    switchPushButton(0);

    navigator.serviceWorker.ready.then(function(serviceWorkerRegistration) {
        // To unsubscribe from push messaging, you need get the
        // subscription object, which you can call unsubscribe() on.
        serviceWorkerRegistration.pushManager.getSubscription().then(
            function(pushSubscription) {
                // Check we have a subscription to unsubscribe
                if (!pushSubscription) {
                    // No subscription object, so set the state
                    // to allow the user to subscribe to push
                    isPushEnabled = false;
                    switchPushButton(1);
                    setCheckbox(0);
                    return;
                }

                // We have a subscription, so call unsubscribe on it
                pushSubscription.unsubscribe().then(function(successful) {
                    switchPushButton(1);
                    isPushEnabled = false;
                    sendSubscriptionToServer();
                    setCheckbox(0);
                    if (typeof localStorage !== "undefined") {
                        localStorage.setItem('a24-push-noauto', 1); // no more autosubscribe
                    }
                }).catch(function(e) {
                    // We failed to unsubscribe, this can lead to
                    // an unusual state, so may be best to remove
                    // the users data from your data store and
                    // inform the user that you have done so
                    console.log('Unsubscription error: ', e);
                    switchPushButton(1);
                    setCheckbox(0);
                });
            }).catch(function(e) {
                console.error('Error thrown while unsubscribing from push messaging.', e);
            });
    });
}

function sendSubscriptionToServer(subscription)
{
    $.post('/ajax/saveSubscription', { endpoint: typeof subscription !== 'undefined' ? subscription.endpoint : ''});
}

function switchPushButton(enable)
{
    var pushButton = document.querySelector('#push-button');
    if (pushButton !== null) {
        if (enable) {
            $(pushButton).prop("disabled", false);
        } else {
            $(pushButton).prop("disabled", true);
        }
    }
}

function setCheckbox(checked)
{
    var pushButton = document.querySelector('#push-button');
    if (pushButton !== null) {
        if (checked) {
            $(pushButton).prop("checked", true);
        } else {
            $(pushButton).prop("checked", false);
        }
    }
}